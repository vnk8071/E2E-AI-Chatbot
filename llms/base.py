from abc import ABC, abstractmethod


class LLMBase(ABC):
    """LLM wrapper should take in a prompt and return a string."""
    @abstractmethod
    def generate_prompt(
        self,
        system_content: str,
        question: str,
        context: str = ""
    ) -> str:
        """Make prompt template based on context and question"""

    @abstractmethod
    def __call__(
        self,
        system_content: str,
        question: str,
        context: str = ""
    ) -> str:
        """Call out to GPT4All's generate method.

        Args:
            question: The question to pass into the model.
            context: The related context to pass into the model.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                context = ""
                question = "Once upon a time, "
                response = model(question)
        """
